package com.example.demo.graphviz;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.function.Predicate;
import java.util.stream.Collectors;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.example.demo.model.Person;

public class PersonConverter {
    Logger log = LoggerFactory.getLogger(getClass());
    
    public List<Person> from(List<PersonDot> personDots) {
        List<Person> people = new ArrayList<>();
        return this.from(people, personDots);
    }
    private List<Person> from(List<Person> people, List<PersonDot> personDots) {
        // log.info("{} personDots have been provided.",personDots.size());

        //create objs first
        for (var personDot : personDots) {

            var dotId = personDot.getDotId();
            var fullLabel = personDot.getFullname();
            int endOfFullname = fullLabel.indexOf("\\n");
            if (endOfFullname == -1) endOfFullname = fullLabel.length();
            var fullname = fullLabel.substring(0, endOfFullname);
            var birthday = personDot.getBirthday();

            var p = findPersonByIdOrFullname(people, dotId, fullname);
            if (p == null) {
                p = new Person(dotId, fullname);
                p.setBirthday(birthday);
                // List<Person> childrenList = this.from(people, personDot.children);
                
                people.add(p);
            }

        }
        // now add rels
         for (var personDot : personDots) {
            Person personToModify = findPersonByIdOrFullname(people, personDot.dotId, personDot.getFullname());

            if ((personDot.spouse == null) &&( personDot.children.size() == 0))
                continue;

            List<Person> childrenList = new ArrayList<>();
            for (var pdot : personDot.children) {
                var child = findPersonByIdOrFullname(people, pdot.dotId, pdot.getFullname());
                if (child == null) {
                    var s = people.stream()
                        .sorted(
                            Comparator.comparing(p -> p.getFullName(), 
                                Comparator.nullsFirst(Comparator.naturalOrder()))
                            )
                    .map(p -> p.getDotId()+"\t"+p.getFullName())
                    .collect(Collectors.joining("\n"));
                    log.error("Child haven't been found by '{}' and '{}'!", pdot.dotId, pdot.getFullname());
                    throw new IllegalStateException("Child should be in top level list: "+pdot+s);
                }
                childrenList.add(child);
            }


            Set<Person> children = new HashSet<>(childrenList);
            personToModify.setChildren(children);
            if (personDot.spouse != null) {
                var spouse = findPersonByIdOrFullname(people, personDot.spouse.dotId, personDot.spouse.getFullname());
                personToModify.setSpouse(spouse);
            }
        }
        // log.info("{} people will be returned.",people.size());
        return people;
        
    }

   

    private Person findPersonByIdOrFullname(List<Person> people, String id, String fullname) {
        Predicate<Person> idPredicate = (p) -> {
            if (id == null) throw new IllegalStateException();
            if (p.getId() == null) return false;
            return
                p.getId().equals(id);
        };
        Predicate<Person> fullnamePredicate = (p) -> {
            if (fullname == null) throw new IllegalStateException();
            return
                p.getFullName().equals(fullname);
        };

        var stream = people.stream();
        if (id != null) {
            stream = stream.filter(idPredicate);
        }
        if (fullname != null) {
            stream = stream.filter(fullnamePredicate);
        }
        var found = stream.toList();
        if (found.size() > 1) 
            throw new IllegalStateException();
        
        if (found.size() == 1) return found.get(0);
        else return null;
    }
    
}
